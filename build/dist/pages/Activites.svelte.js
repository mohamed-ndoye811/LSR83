import './Activites.svelte.css.proxy.js';
/* src\pages\Activites.svelte generated by Svelte v3.32.3 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	space,
	text,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import ActivityPage from "./activites/ActivityPage.svelte.js";
import activites from "../utils/activites.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (22:29) 
function create_if_block_1(ctx) {
	let activitypage;
	let current;

	activitypage = new ActivityPage({
			props: { activite: /*pageActivite*/ ctx[0] }
		});

	return {
		c() {
			create_component(activitypage.$$.fragment);
		},
		m(target, anchor) {
			mount_component(activitypage, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const activitypage_changes = {};
			if (dirty & /*pageActivite*/ 1) activitypage_changes.activite = /*pageActivite*/ ctx[0];
			activitypage.$set(activitypage_changes);
		},
		i(local) {
			if (current) return;
			transition_in(activitypage.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(activitypage.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(activitypage, detaching);
		}
	};
}

// (13:0) {#if pageActivite == ""}
function create_if_block(ctx) {
	let div;
	let each_value = activites;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "container svelte-f9kler");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*choixActivité, activites*/ 2) {
				each_value = activites;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (15:4) {#each activites as activity}
function create_each_block(ctx) {
	let div;
	let img;
	let img_src_value;
	let img_alt_value;
	let t0;
	let p;
	let t1_value = /*activity*/ ctx[3].nom + "";
	let t1;
	let t2;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[2](/*activity*/ ctx[3]);
	}

	return {
		c() {
			div = element("div");
			img = element("img");
			t0 = space();
			p = element("p");
			t1 = text(t1_value);
			t2 = space();
			if (img.src !== (img_src_value = /*activity*/ ctx[3].imageSrc)) attr(img, "src", img_src_value);
			attr(img, "alt", img_alt_value = "image " + /*activity*/ ctx[3].nom);
			attr(img, "class", "svelte-f9kler");
			attr(p, "class", "svelte-f9kler");
			attr(div, "class", "activityItem svelte-f9kler");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, img);
			append(div, t0);
			append(div, p);
			append(p, t1);
			append(div, t2);

			if (!mounted) {
				dispose = listen(div, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_if_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*pageActivite*/ ctx[0] == "") return 0;
		if (/*pageActivite*/ ctx[0] != "") return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx, -1))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let pageActivite = "";

	function choixActivité(nomActivite) {
		console.log(nomActivite);
		$$invalidate(0, pageActivite = nomActivite);
	}

	const click_handler = activity => choixActivité(activity.nom);
	return [pageActivite, choixActivité, click_handler];
}

class Activites extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Activites;