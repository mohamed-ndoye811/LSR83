import './PlanningsSelection.svelte.css.proxy.js';
/* src\pages\PlanningsSelection.svelte generated by Svelte v3.32.3 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	space,
	toggle_class,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import Annuel from "./Plannings/Annuel.svelte.js";
import Mensuel from "./Plannings/Mensuel.svelte.js";
import { db } from "../utils/firestore.js";

function create_if_block(ctx) {
	let div1;
	let current_block_type_index;
	let if_block;
	let t0;
	let div0;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_1, create_if_block_2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*planningSelected*/ ctx[1] === "Annuel") return 0;
		if (/*planningSelected*/ ctx[1] === "Mensuel") return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx, -1))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	return {
		c() {
			div1 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			div0 = element("div");
			div0.textContent = "RETOUR";
			attr(div0, "class", "bouton svelte-1qhuapa");
			attr(div1, "class", "container svelte-1qhuapa");
		},
		m(target, anchor) {
			insert(target, div1, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div1, null);
			}

			append(div1, t0);
			append(div1, div0);
			current = true;

			if (!mounted) {
				dispose = listen(div0, "click", /*click_handler_2*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(div1, t0);
				} else {
					if_block = null;
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			mounted = false;
			dispose();
		}
	};
}

// (29:45) 
function create_if_block_2(ctx) {
	let mensuel;
	let current;
	mensuel = new Mensuel({ props: { db } });

	return {
		c() {
			create_component(mensuel.$$.fragment);
		},
		m(target, anchor) {
			mount_component(mensuel, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(mensuel.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(mensuel.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(mensuel, detaching);
		}
	};
}

// (27:4) {#if planningSelected === "Annuel"}
function create_if_block_1(ctx) {
	let annuel;
	let current;
	annuel = new Annuel({});

	return {
		c() {
			create_component(annuel.$$.fragment);
		},
		m(target, anchor) {
			mount_component(annuel, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(annuel.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(annuel.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(annuel, detaching);
		}
	};
}

function create_fragment(ctx) {
	let ul;
	let li0;
	let t1;
	let li1;
	let t3;
	let if_block_anchor;
	let current;
	let mounted;
	let dispose;
	let if_block = /*planningSelected*/ ctx[1] != "" && create_if_block(ctx);

	return {
		c() {
			ul = element("ul");
			li0 = element("li");
			li0.textContent = "Annuel";
			t1 = space();
			li1 = element("li");
			li1.textContent = "Mensuel";
			t3 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr(li0, "class", "svelte-1qhuapa");
			attr(li1, "class", "svelte-1qhuapa");
			attr(ul, "class", "svelte-1qhuapa");
			toggle_class(ul, "hideSelection", /*hideSelection*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, ul, anchor);
			append(ul, li0);
			append(ul, t1);
			append(ul, li1);
			insert(target, t3, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(li0, "click", /*click_handler*/ ctx[4]),
					listen(li1, "click", /*click_handler_1*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*hideSelection*/ 1) {
				toggle_class(ul, "hideSelection", /*hideSelection*/ ctx[0]);
			}

			if (/*planningSelected*/ ctx[1] != "") {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*planningSelected*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			if (detaching) detach(t3);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let hideSelection = false;
	let planningSelected = "";

	function planningSelection(choix) {
		$$invalidate(1, planningSelected = choix);
		$$invalidate(0, hideSelection = true);
	}

	function backButton() {
		$$invalidate(0, hideSelection = false);
		$$invalidate(1, planningSelected = "");
	}

	const click_handler = () => planningSelection("Annuel");
	const click_handler_1 = () => planningSelection("Mensuel");
	const click_handler_2 = () => backButton();

	return [
		hideSelection,
		planningSelected,
		planningSelection,
		backButton,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

class PlanningsSelection extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default PlanningsSelection;