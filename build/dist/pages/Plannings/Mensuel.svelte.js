import './Mensuel.svelte.css.proxy.js';
/* src\pages\Plannings\Mensuel.svelte generated by Svelte v3.32.3 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../../../_snowpack/pkg/svelte/internal.js";

import DetailsActivites from "../../components/DetailsActivites.svelte.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	return child_ctx;
}

// (38:4) {#each dates as date}
function create_each_block_2(ctx) {
	let p;
	let t0_value = /*jour*/ ctx[2](/*date*/ ctx[14].data().date) + "";
	let t0;
	let t1;
	let t2_value = /*date*/ ctx[14].data().nom + "";
	let t2;
	let t3;
	let mounted;
	let dispose;

	return {
		c() {
			p = element("p");
			t0 = text(t0_value);
			t1 = text(" - ");
			t2 = text(t2_value);
			t3 = space();
			attr(p, "class", "svelte-1c5kqkt");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			append(p, t1);
			append(p, t2);
			append(p, t3);

			if (!mounted) {
				dispose = listen(p, "click", /*click_handler*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*dates*/ 1 && t0_value !== (t0_value = /*jour*/ ctx[2](/*date*/ ctx[14].data().date) + "")) set_data(t0, t0_value);
			if (dirty & /*dates*/ 1 && t2_value !== (t2_value = /*date*/ ctx[14].data().nom + "")) set_data(t2, t2_value);
		},
		d(detaching) {
			if (detaching) detach(p);
			mounted = false;
			dispose();
		}
	};
}

// (48:4) {#each Array(7) as _}
function create_each_block_1(ctx) {
	let p;
	let mounted;
	let dispose;

	return {
		c() {
			p = element("p");
			p.textContent = "LUNDI 4 - RANDONÉE";
			attr(p, "class", "svelte-1c5kqkt");
		},
		m(target, anchor) {
			insert(target, p, anchor);

			if (!mounted) {
				dispose = listen(p, "click", /*click_handler_1*/ ctx[5]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(p);
			mounted = false;
			dispose();
		}
	};
}

// (56:4) {#each Array(7) as _}
function create_each_block(ctx) {
	let p;
	let mounted;
	let dispose;

	return {
		c() {
			p = element("p");
			p.textContent = "LUNDI 4 - RANDONÉE";
			attr(p, "class", "svelte-1c5kqkt");
		},
		m(target, anchor) {
			insert(target, p, anchor);

			if (!mounted) {
				dispose = listen(p, "click", /*click_handler_2*/ ctx[6]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(p);
			mounted = false;
			dispose();
		}
	};
}

// (62:0) {#if showDetails == true}
function create_if_block(ctx) {
	let detailsactivites;
	let current;
	detailsactivites = new DetailsActivites({ props: { typeActivite: "Randonnée" } });
	detailsactivites.$on("click", /*click_handler_3*/ ctx[7]);

	return {
		c() {
			create_component(detailsactivites.$$.fragment);
		},
		m(target, anchor) {
			mount_component(detailsactivites, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(detailsactivites.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(detailsactivites.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(detailsactivites, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let div0;
	let h10;
	let t1;
	let t2;
	let div1;
	let h11;
	let t4;
	let t5;
	let div2;
	let h12;
	let t7;
	let t8;
	let if_block_anchor;
	let current;
	let each_value_2 = /*dates*/ ctx[0];
	let each_blocks_2 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	let each_value_1 = Array(7);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = Array(7);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	let if_block = /*showDetails*/ ctx[1] == true && create_if_block(ctx);

	return {
		c() {
			div3 = element("div");
			div0 = element("div");
			h10 = element("h1");
			h10.textContent = "FÉVRIER";
			t1 = space();

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t2 = space();
			div1 = element("div");
			h11 = element("h1");
			h11.textContent = "MARS";
			t4 = space();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t5 = space();
			div2 = element("div");
			h12 = element("h1");
			h12.textContent = "AVRIL";
			t7 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t8 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr(h10, "class", "svelte-1c5kqkt");
			attr(div0, "class", "monthContainer svelte-1c5kqkt");
			attr(h11, "class", "svelte-1c5kqkt");
			attr(div1, "class", "monthContainer svelte-1c5kqkt");
			attr(h12, "class", "svelte-1c5kqkt");
			attr(div2, "class", "monthContainer svelte-1c5kqkt");
			attr(div3, "class", "container svelte-1c5kqkt");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div0);
			append(div0, h10);
			append(div0, t1);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].m(div0, null);
			}

			append(div3, t2);
			append(div3, div1);
			append(div1, h11);
			append(div1, t4);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div1, null);
			}

			append(div3, t5);
			append(div3, div2);
			append(div2, h12);
			append(div2, t7);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}

			insert(target, t8, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*showDetails, dates, jour*/ 7) {
				each_value_2 = /*dates*/ ctx[0];
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_2[i]) {
						each_blocks_2[i].p(child_ctx, dirty);
					} else {
						each_blocks_2[i] = create_each_block_2(child_ctx);
						each_blocks_2[i].c();
						each_blocks_2[i].m(div0, null);
					}
				}

				for (; i < each_blocks_2.length; i += 1) {
					each_blocks_2[i].d(1);
				}

				each_blocks_2.length = each_value_2.length;
			}

			if (dirty & /*showDetails*/ 2) {
				each_value_1 = Array(7);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div1, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*showDetails*/ 2) {
				each_value = Array(7);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div2, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (/*showDetails*/ ctx[1] == true) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*showDetails*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			destroy_each(each_blocks_2, detaching);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t8);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let dates = []; //Tableau des dates
	let { db } = $$props;

	// Remplissage du tableau des dates à partir de la base de données
	db.collection("activites").onSnapshot(data => {
		$$invalidate(0, dates = data.docs);
	});

	// Fonction pour ajuster l'affichage de la date
	let xx = new Date(); //On crée un nouvel Élément Date

	const jour = timestamp => {
		// Celui-ci va nous permettre de passer la date qui est initialement en millisecondes, en vrai date afin de récupérer le jour, le mois etc...
		xx.setTime(timestamp * 1000); // javascript timestamps are in milliseconds

		let days = ["Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"];
		return days[xx.getDay()] + " " + xx.getDate().toString(); // the Day
	};

	let showDetails = false;
	const click_handler = () => $$invalidate(1, showDetails = true);
	const click_handler_1 = () => $$invalidate(1, showDetails = true);
	const click_handler_2 = () => $$invalidate(1, showDetails = true);
	const click_handler_3 = () => $$invalidate(1, showDetails = false);

	$$self.$$set = $$props => {
		if ("db" in $$props) $$invalidate(3, db = $$props.db);
	};

	return [
		dates,
		showDetails,
		jour,
		db,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3
	];
}

class Mensuel extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { db: 3 });
	}
}

export default Mensuel;